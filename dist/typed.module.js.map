{"version":3,"file":"typed.module.js","sources":["../src/defaults.js","../src/initializer.js","../src/html-parser.js","../src/typed.js"],"sourcesContent":["/**\n * Defaults & options\n * @returns {object} Typed defaults & options\n * @public\n */\n\nconst defaults = {\n  /**\n   * @property {array} strings strings to be typed\n   * @property {string} stringsElement ID of element containing string children\n   */\n  strings: [\n    'These are the default values...',\n    'You know what you should do?',\n    'Use your own!',\n    'Have a great day!',\n  ],\n  stringsElement: null,\n\n  /**\n   * @property {number} typeSpeed type speed in milliseconds\n   */\n  typeSpeed: 0,\n\n  /**\n   * @property {number} startDelay time before typing starts in milliseconds\n   */\n  startDelay: 0,\n\n  /**\n   * @property {number} backSpeed backspacing speed in milliseconds\n   */\n  backSpeed: 0,\n\n  /**\n   * @property {boolean} smartBackspace only backspace what doesn't match the previous string\n   */\n  smartBackspace: true,\n\n  /**\n   * @property {boolean} shuffle shuffle the strings\n   */\n  shuffle: false,\n\n  /**\n   * @property {number} backDelay time before backspacing in milliseconds\n   */\n  backDelay: 700,\n\n  /**\n   * @property {boolean} fadeOut Fade out instead of backspace\n   * @property {string} fadeOutClass css class for fade animation\n   * @property {boolean} fadeOutDelay Fade out delay in milliseconds\n   */\n  fadeOut: false,\n  fadeOutClass: 'typed-fade-out',\n  fadeOutDelay: 500,\n\n  /**\n   * @property {boolean} loop loop strings\n   * @property {number} loopCount amount of loops\n   */\n  loop: false,\n  loopCount: Infinity,\n\n  /**\n   * @property {boolean} showCursor show cursor\n   * @property {string} cursorChar character for cursor\n   * @property {boolean} autoInsertCss insert CSS for cursor and fadeOut into HTML <head>\n   */\n  showCursor: true,\n  cursorChar: '|',\n  autoInsertCss: true,\n\n  /**\n   * @property {string} attr attribute for typing\n   * Ex: input placeholder, value, or just HTML text\n   */\n  attr: null,\n\n  /**\n   * @property {boolean} bindInputFocusEvents bind to focus and blur if el is text input\n   */\n  bindInputFocusEvents: false,\n\n  /**\n   * @property {string} contentType 'html' or 'null' for plaintext\n   */\n  contentType: 'html',\n\n  /**\n   * Before it begins typing\n   * @param {Typed} self\n   */\n  onBegin: (self) => {},\n\n  /**\n   * All typing is complete\n   * @param {Typed} self\n   */\n  onComplete: (self) => {},\n\n  /**\n   * Before each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  preStringTyped: (arrayPos, self) => {},\n\n  /**\n   * After each string is typed\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStringTyped: (arrayPos, self) => {},\n\n  /**\n   * During looping, after last string is typed\n   * @param {Typed} self\n   */\n  onLastStringBackspaced: (self) => {},\n\n  /**\n   * Typing has been stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingPaused: (arrayPos, self) => {},\n\n  /**\n   * Typing has been started after being stopped\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onTypingResumed: (arrayPos, self) => {},\n\n  /**\n   * After reset\n   * @param {Typed} self\n   */\n  onReset: (self) => {},\n\n  /**\n   * After stop\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStop: (arrayPos, self) => {},\n\n  /**\n   * After start\n   * @param {number} arrayPos\n   * @param {Typed} self\n   */\n  onStart: (arrayPos, self) => {},\n\n  /**\n   * After destroy\n   * @param {Typed} self\n   */\n  onDestroy: (self) => {},\n};\n\nexport default defaults;\n","import defaults from './defaults.js';\n/**\n * Initialize the Typed object\n */\n\nexport default class Initializer {\n  /**\n   * Load up defaults & options on the Typed instance\n   * @param {Typed} self instance of Typed\n   * @param {object} options options object\n   * @param {string} elementId HTML element ID _OR_ instance of HTML element\n   * @private\n   */\n\n  load(self, options, elementId) {\n    // chosen element to manipulate text\n    if (typeof elementId === 'string') {\n      self.el = document.querySelector(elementId);\n    } else {\n      self.el = elementId;\n    }\n\n    self.options = { ...defaults, ...options };\n\n    // attribute to type into\n    self.isInput = self.el.tagName.toLowerCase() === 'input';\n    self.attr = self.options.attr;\n    self.bindInputFocusEvents = self.options.bindInputFocusEvents;\n\n    // show cursor\n    self.showCursor = self.isInput ? false : self.options.showCursor;\n\n    // custom cursor\n    self.cursorChar = self.options.cursorChar;\n\n    // Is the cursor blinking\n    self.cursorBlinking = true;\n\n    // text content of element\n    self.elContent = self.attr\n      ? self.el.getAttribute(self.attr)\n      : self.el.textContent;\n\n    // html or plain text\n    self.contentType = self.options.contentType;\n\n    // typing speed\n    self.typeSpeed = self.options.typeSpeed;\n\n    // add a delay before typing starts\n    self.startDelay = self.options.startDelay;\n\n    // backspacing speed\n    self.backSpeed = self.options.backSpeed;\n\n    // only backspace what doesn't match the previous string\n    self.smartBackspace = self.options.smartBackspace;\n\n    // amount of time to wait before backspacing\n    self.backDelay = self.options.backDelay;\n\n    // Fade out instead of backspace\n    self.fadeOut = self.options.fadeOut;\n    self.fadeOutClass = self.options.fadeOutClass;\n    self.fadeOutDelay = self.options.fadeOutDelay;\n\n    // variable to check whether typing is currently paused\n    self.isPaused = false;\n\n    // input strings of text\n    self.strings = self.options.strings.map((s) => s.trim());\n\n    // div containing strings\n    if (typeof self.options.stringsElement === 'string') {\n      self.stringsElement = document.querySelector(self.options.stringsElement);\n    } else {\n      self.stringsElement = self.options.stringsElement;\n    }\n\n    if (self.stringsElement) {\n      self.strings = [];\n      self.stringsElement.style.cssText =\n        'clip: rect(0 0 0 0);clip-path:inset(50%);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px;';\n\n      const strings = Array.prototype.slice.apply(self.stringsElement.children);\n      const stringsLength = strings.length;\n\n      if (stringsLength) {\n        for (let i = 0; i < stringsLength; i += 1) {\n          const stringEl = strings[i];\n          self.strings.push(stringEl.innerHTML.trim());\n        }\n      }\n    }\n\n    // character number position of current string\n    self.strPos = 0;\n\n    // If there is some text in the element\n    self.currentElContent = this.getCurrentElContent(self);\n\n    if (self.currentElContent && self.currentElContent.length > 0) {\n      self.strPos = self.currentElContent.length - 1;\n      self.strings.unshift(self.currentElContent);\n    }\n\n    // the order of strings\n    self.sequence = [];\n\n    // Set the order in which the strings are typed\n    for (let i in self.strings) {\n      self.sequence[i] = i;\n    }\n\n    // current array position\n    self.arrayPos = 0;\n\n    // index of string to stop backspacing on\n    self.stopNum = 0;\n\n    // Looping logic\n    self.loop = self.options.loop;\n    self.loopCount = self.options.loopCount;\n    self.curLoop = 0;\n\n    // shuffle the strings\n    self.shuffle = self.options.shuffle;\n\n    self.pause = {\n      status: false,\n      typewrite: true,\n      curString: '',\n      curStrPos: 0,\n    };\n\n    // When the typing is complete (when not looped)\n    self.typingComplete = false;\n\n    self.autoInsertCss = self.options.autoInsertCss;\n\n    if (self.autoInsertCss) {\n      this.appendCursorAnimationCss(self);\n      this.appendFadeOutAnimationCss(self);\n    }\n  }\n\n  getCurrentElContent(self) {\n    let elContent = '';\n    if (self.attr) {\n      elContent = self.el.getAttribute(self.attr);\n    } else if (self.isInput) {\n      elContent = self.el.value;\n    } else if (self.contentType === 'html') {\n      elContent = self.el.innerHTML;\n    } else {\n      elContent = self.el.textContent;\n    }\n    return elContent;\n  }\n\n  appendCursorAnimationCss(self) {\n    const cssDataName = 'data-typed-js-cursor-css';\n\n    if (!self.showCursor || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-cursor{\n          opacity: 1;\n          user-select: none;\n        }\n        .typed-cursor.typed-cursor--blink{\n          animation: typedjsBlink 0.7s infinite;\n          -webkit-animation: typedjsBlink 0.7s infinite;\n                  animation: typedjsBlink 0.7s infinite;\n        }\n        @keyframes typedjsBlink{\n          50% { opacity: 0.0; }\n        }\n        @-webkit-keyframes typedjsBlink{\n          0% { opacity: 1; }\n          50% { opacity: 0.0; }\n          100% { opacity: 1; }\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n\n  appendFadeOutAnimationCss(self) {\n    const cssDataName = 'data-typed-fadeout-js-css';\n\n    if (!self.fadeOut || document.querySelector(`[${cssDataName}]`)) {\n      return;\n    }\n\n    let css = document.createElement('style');\n    css.setAttribute(cssDataName, 'true');\n\n    css.innerHTML = `\n        .typed-fade-out{\n          opacity: 0;\n          transition: opacity .25s;\n        }\n        .typed-cursor.typed-cursor--blink.typed-fade-out{\n          -webkit-animation: 0;\n          animation: 0;\n        }\n      `;\n\n    document.body.appendChild(css);\n  }\n}\n\nexport let initializer = new Initializer();\n","/**\n * TODO: These methods can probably be combined somehow\n * Parse HTML tags & HTML Characters\n */\n\nexport default class HTMLParser {\n  /**\n   * Type HTML tags & HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n\n  typeHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '<' || curChar === '&') {\n      let endTag = '';\n      if (curChar === '<') {\n        endTag = '>';\n      } else {\n        endTag = ';';\n      }\n      while (curString.substring(curStrPos + 1).charAt(0) !== endTag) {\n        curStrPos++;\n        if (curStrPos + 1 > curString.length) {\n          break;\n        }\n      }\n      curStrPos++;\n    }\n    return curStrPos;\n  }\n\n  /**\n   * Backspace HTML tags and HTML Characters\n   * @param {string} curString Current string\n   * @param {number} curStrPos Position in current string\n   * @param {Typed} self instance of Typed\n   * @returns {number} a new string position\n   * @private\n   */\n  backSpaceHtmlChars(curString, curStrPos, self) {\n    if (self.contentType !== 'html') return curStrPos;\n    const curChar = curString.substring(curStrPos).charAt(0);\n    if (curChar === '>' || curChar === ';') {\n      let endTag = '';\n      if (curChar === '>') {\n        endTag = '<';\n      } else {\n        endTag = '&';\n      }\n      while (curString.substring(curStrPos - 1).charAt(0) !== endTag) {\n        curStrPos--;\n        if (curStrPos < 0) {\n          break;\n        }\n      }\n      curStrPos--;\n    }\n    return curStrPos;\n  }\n}\n\nexport let htmlParser = new HTMLParser();\n","import { initializer } from './initializer.js';\nimport { htmlParser } from './html-parser.js';\n\n/**\n * Welcome to Typed.js!\n * @param {string} elementId HTML element ID _OR_ HTML element\n * @param {object} options options object\n * @returns {object} a new Typed object\n */\nexport default class Typed {\n  constructor(elementId, options) {\n    // Initialize it up\n    initializer.load(this, options, elementId);\n    // All systems go!\n    this.begin();\n  }\n\n  /**\n   * Toggle start() and stop() of the Typed instance\n   * @public\n   */\n  toggle() {\n    this.pause.status ? this.start() : this.stop();\n  }\n\n  /**\n   * Stop typing / backspacing and enable cursor blinking\n   * @public\n   */\n  stop() {\n    if (this.typingComplete) return;\n    if (this.pause.status) return;\n    this.toggleBlinking(true);\n    this.pause.status = true;\n    this.options.onStop(this.arrayPos, this);\n  }\n\n  /**\n   * Start typing / backspacing after being stopped\n   * @public\n   */\n  start() {\n    if (this.typingComplete) return;\n    if (!this.pause.status) return;\n    this.pause.status = false;\n    if (this.pause.typewrite) {\n      this.typewrite(this.pause.curString, this.pause.curStrPos);\n    } else {\n      this.backspace(this.pause.curString, this.pause.curStrPos);\n    }\n    this.options.onStart(this.arrayPos, this);\n  }\n\n  /**\n   * Destroy this instance of Typed\n   * @public\n   */\n  destroy() {\n    this.reset(false);\n    this.options.onDestroy(this);\n  }\n\n  /**\n   * Reset Typed and optionally restarts\n   * @param {boolean} restart\n   * @public\n   */\n  reset(restart = true) {\n    clearInterval(this.timeout);\n    this.replaceText('');\n    if (this.cursor && this.cursor.parentNode) {\n      this.cursor.parentNode.removeChild(this.cursor);\n      this.cursor = null;\n    }\n    this.strPos = 0;\n    this.arrayPos = 0;\n    this.curLoop = 0;\n    if (restart) {\n      this.insertCursor();\n      this.options.onReset(this);\n      this.begin();\n    }\n  }\n\n  /**\n   * Begins the typing animation\n   * @private\n   */\n  begin() {\n    this.options.onBegin(this);\n    this.typingComplete = false;\n    this.shuffleStringsIfNeeded(this);\n    this.insertCursor();\n    if (this.bindInputFocusEvents) this.bindFocusEvents();\n    this.timeout = setTimeout(() => {\n      // If the strPos is 0, we're starting from the beginning of a string\n      // else, we're starting with a previous string that needs to be backspaced first\n      if (this.strPos === 0) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      } else {\n        this.backspace(this.strings[this.sequence[this.arrayPos]], this.strPos);\n      }\n    }, this.startDelay);\n  }\n\n  /**\n   * Called for each character typed\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  typewrite(curString, curStrPos) {\n    if (this.fadeOut && this.el.classList.contains(this.fadeOutClass)) {\n      this.el.classList.remove(this.fadeOutClass);\n      if (this.cursor) this.cursor.classList.remove(this.fadeOutClass);\n    }\n\n    const humanize = this.humanizer(this.typeSpeed);\n    let numChars = 1;\n\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, true);\n      return;\n    }\n\n    // contain typing function in a timeout humanize'd delay\n    this.timeout = setTimeout(() => {\n      // skip over any HTML chars\n      curStrPos = htmlParser.typeHtmlChars(curString, curStrPos, this);\n\n      let pauseTime = 0;\n      let substr = curString.substring(curStrPos);\n      // check for an escape character before a pause value\n      // format: \\^\\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^\n      // single ^ are removed from string\n      if (substr.charAt(0) === '^') {\n        if (/^\\^\\d+/.test(substr)) {\n          let skip = 1; // skip at least 1\n          substr = /\\d+/.exec(substr)[0];\n          skip += substr.length;\n          pauseTime = parseInt(substr);\n          this.temporaryPause = true;\n          this.options.onTypingPaused(this.arrayPos, this);\n          // strip out the escape character and pause value so they're not printed\n          curString =\n            curString.substring(0, curStrPos) +\n            curString.substring(curStrPos + skip);\n          this.toggleBlinking(true);\n        }\n      }\n\n      // check for skip characters formatted as\n      // \"this is a `string to print NOW` ...\"\n      if (substr.charAt(0) === '`') {\n        while (curString.substring(curStrPos + numChars).charAt(0) !== '`') {\n          numChars++;\n          if (curStrPos + numChars > curString.length) break;\n        }\n        // strip out the escape characters and append all the string in between\n        const stringBeforeSkip = curString.substring(0, curStrPos);\n        const stringSkipped = curString.substring(\n          stringBeforeSkip.length + 1,\n          curStrPos + numChars\n        );\n        const stringAfterSkip = curString.substring(curStrPos + numChars + 1);\n        curString = stringBeforeSkip + stringSkipped + stringAfterSkip;\n        numChars--;\n      }\n\n      // timeout for any pause after a character\n      this.timeout = setTimeout(() => {\n        // Accounts for blinking while paused\n        this.toggleBlinking(false);\n\n        // We're done with this sentence!\n        if (curStrPos >= curString.length) {\n          this.doneTyping(curString, curStrPos);\n        } else {\n          this.keepTyping(curString, curStrPos, numChars);\n        }\n        // end of character pause\n        if (this.temporaryPause) {\n          this.temporaryPause = false;\n          this.options.onTypingResumed(this.arrayPos, this);\n        }\n      }, pauseTime);\n\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Continue to the next string & begin typing\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  keepTyping(curString, curStrPos, numChars) {\n    // call before functions if applicable\n    if (curStrPos === 0) {\n      this.toggleBlinking(false);\n      this.options.preStringTyped(this.arrayPos, this);\n    }\n    // start typing each new char into existing string\n    // curString: arg, this.el.html: original text inside element\n    curStrPos += numChars;\n    const nextString = curString.substring(0, curStrPos);\n    this.replaceText(nextString);\n    // loop the function\n    this.typewrite(curString, curStrPos);\n  }\n\n  /**\n   * We're done typing the current string\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  doneTyping(curString, curStrPos) {\n    // fires callback function\n    this.options.onStringTyped(this.arrayPos, this);\n    this.toggleBlinking(true);\n    // is this the final string\n    if (this.arrayPos === this.strings.length - 1) {\n      // callback that occurs on the last typed string\n      this.complete();\n      // quit if we wont loop back\n      if (this.loop === false || this.curLoop === this.loopCount) {\n        return;\n      }\n    }\n    this.timeout = setTimeout(() => {\n      this.backspace(curString, curStrPos);\n    }, this.backDelay);\n  }\n\n  /**\n   * Backspaces 1 character at a time\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @private\n   */\n  backspace(curString, curStrPos) {\n    if (this.pause.status === true) {\n      this.setPauseStatus(curString, curStrPos, false);\n      return;\n    }\n    if (this.fadeOut) return this.initFadeOut();\n\n    this.toggleBlinking(false);\n    const humanize = this.humanizer(this.backSpeed);\n\n    this.timeout = setTimeout(() => {\n      curStrPos = htmlParser.backSpaceHtmlChars(curString, curStrPos, this);\n      // replace text with base text + typed characters\n      const curStringAtPosition = curString.substring(0, curStrPos);\n      this.replaceText(curStringAtPosition);\n\n      // if smartBack is enabled\n      if (this.smartBackspace) {\n        // the remaining part of the current string is equal of the same part of the new string\n        let nextString = this.strings[this.arrayPos + 1];\n        if (\n          nextString &&\n          curStringAtPosition === nextString.substring(0, curStrPos)\n        ) {\n          this.stopNum = curStrPos;\n        } else {\n          this.stopNum = 0;\n        }\n      }\n\n      // if the number (id of character in current string) is\n      // less than the stop number, keep going\n      if (curStrPos > this.stopNum) {\n        // subtract characters one by one\n        curStrPos--;\n        // loop the function\n        this.backspace(curString, curStrPos);\n      } else if (curStrPos <= this.stopNum) {\n        // if the stop number has been reached, increase\n        // array position to next string\n        this.arrayPos++;\n        // When looping, begin at the beginning after backspace complete\n        if (this.arrayPos === this.strings.length) {\n          this.arrayPos = 0;\n          this.options.onLastStringBackspaced();\n          this.shuffleStringsIfNeeded();\n          this.begin();\n        } else {\n          this.typewrite(this.strings[this.sequence[this.arrayPos]], curStrPos);\n        }\n      }\n      // humanized value for typing\n    }, humanize);\n  }\n\n  /**\n   * Full animation is complete\n   * @private\n   */\n  complete() {\n    this.options.onComplete(this);\n    if (this.loop) {\n      this.curLoop++;\n    } else {\n      this.typingComplete = true;\n    }\n  }\n\n  /**\n   * Has the typing been stopped\n   * @param {string} curString the current string in the strings array\n   * @param {number} curStrPos the current position in the curString\n   * @param {boolean} isTyping\n   * @private\n   */\n  setPauseStatus(curString, curStrPos, isTyping) {\n    this.pause.typewrite = isTyping;\n    this.pause.curString = curString;\n    this.pause.curStrPos = curStrPos;\n  }\n\n  /**\n   * Toggle the blinking cursor\n   * @param {boolean} isBlinking\n   * @private\n   */\n  toggleBlinking(isBlinking) {\n    if (!this.cursor) return;\n    // if in paused state, don't toggle blinking a 2nd time\n    if (this.pause.status) return;\n    if (this.cursorBlinking === isBlinking) return;\n    this.cursorBlinking = isBlinking;\n    if (isBlinking) {\n      this.cursor.classList.add('typed-cursor--blink');\n    } else {\n      this.cursor.classList.remove('typed-cursor--blink');\n    }\n  }\n\n  /**\n   * Speed in MS to type\n   * @param {number} speed\n   * @private\n   */\n  humanizer(speed) {\n    return Math.round((Math.random() * speed) / 2) + speed;\n  }\n\n  /**\n   * Shuffle the sequence of the strings array\n   * @private\n   */\n  shuffleStringsIfNeeded() {\n    if (!this.shuffle) return;\n    this.sequence = this.sequence.sort(() => Math.random() - 0.5);\n  }\n\n  /**\n   * Adds a CSS class to fade out current string\n   * @private\n   */\n  initFadeOut() {\n    this.el.className += ` ${this.fadeOutClass}`;\n    if (this.cursor) this.cursor.className += ` ${this.fadeOutClass}`;\n    return setTimeout(() => {\n      this.arrayPos++;\n      this.replaceText('');\n\n      // Resets current string if end of loop reached\n      if (this.strings.length > this.arrayPos) {\n        this.typewrite(this.strings[this.sequence[this.arrayPos]], 0);\n      } else {\n        this.typewrite(this.strings[0], 0);\n        this.arrayPos = 0;\n      }\n    }, this.fadeOutDelay);\n  }\n\n  /**\n   * Replaces current text in the HTML element\n   * depending on element type\n   * @param {string} str\n   * @private\n   */\n  replaceText(str) {\n    if (this.attr) {\n      this.el.setAttribute(this.attr, str);\n    } else {\n      if (this.isInput) {\n        this.el.value = str;\n      } else if (this.contentType === 'html') {\n        this.el.innerHTML = str;\n      } else {\n        this.el.textContent = str;\n      }\n    }\n  }\n\n  /**\n   * If using input elements, bind focus in order to\n   * start and stop the animation\n   * @private\n   */\n  bindFocusEvents() {\n    if (!this.isInput) return;\n    this.el.addEventListener('focus', (e) => {\n      this.stop();\n    });\n    this.el.addEventListener('blur', (e) => {\n      if (this.el.value && this.el.value.length !== 0) {\n        return;\n      }\n      this.start();\n    });\n  }\n\n  /**\n   * On init, insert the cursor element\n   * @private\n   */\n  insertCursor() {\n    if (!this.showCursor) return;\n    if (this.cursor) return;\n    this.cursor = document.createElement('span');\n    this.cursor.className = 'typed-cursor';\n    this.cursor.setAttribute('aria-hidden', true);\n    this.cursor.innerHTML = this.cursorChar;\n    this.el.parentNode &&\n      this.el.parentNode.insertBefore(this.cursor, this.el.nextSibling);\n  }\n}\n"],"names":["defaults","strings","stringsElement","typeSpeed","startDelay","backSpeed","smartBackspace","shuffle","backDelay","fadeOut","fadeOutClass","fadeOutDelay","loop","loopCount","Infinity","showCursor","cursorChar","autoInsertCss","attr","bindInputFocusEvents","contentType","onBegin","self","onComplete","preStringTyped","arrayPos","onStringTyped","onLastStringBackspaced","onTypingPaused","onTypingResumed","onReset","onStop","onStart","onDestroy","initializer","load","options","elementId","el","document","querySelector","_extends","isInput","tagName","toLowerCase","cursorBlinking","elContent","getAttribute","textContent","isPaused","map","s","trim","style","cssText","Array","prototype","slice","apply","children","stringsLength","length","i","push","innerHTML","strPos","currentElContent","this","getCurrentElContent","unshift","sequence","stopNum","curLoop","pause","status","typewrite","curString","curStrPos","typingComplete","appendCursorAnimationCss","appendFadeOutAnimationCss","value","cssDataName","css","createElement","setAttribute","body","appendChild","htmlParser","typeHtmlChars","curChar","substring","charAt","endTag","backSpaceHtmlChars","Typed","constructor","begin","toggle","start","stop","toggleBlinking","backspace","destroy","reset","restart","clearInterval","timeout","replaceText","cursor","parentNode","removeChild","insertCursor","shuffleStringsIfNeeded","bindFocusEvents","setTimeout","classList","contains","remove","humanize","humanizer","numChars","pauseTime","substr","test","skip","exec","parseInt","temporaryPause","stringBeforeSkip","stringSkipped","stringAfterSkip","doneTyping","keepTyping","setPauseStatus","nextString","complete","initFadeOut","curStringAtPosition","isTyping","isBlinking","add","speed","Math","round","random","sort","className","str","addEventListener","e","insertBefore","nextSibling"],"mappings":"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"}